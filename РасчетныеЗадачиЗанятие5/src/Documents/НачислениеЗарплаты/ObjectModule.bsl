
Процедура Объект_ЗаполнитьТЧ() Экспорт
	
	Начисления.Очистить();
	Удержания.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиСрезПоследних.Подразделение КАК Подразделение,
		|	СотрудникиСрезПоследних.Должность КАК Должность,
		|	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
		|	&НачалоМесяца КАК Период,
		|	СотрудникиСрезПоследних.Состояние КАК Состояние
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	РегистрСведений.СостояниеСотрудников.СрезПоследних(&НачалоМесяца,) КАК СотрудникиСрезПоследних
		|ГДЕ
		|	СотрудникиСрезПоследних.Состояние <> &СостояниеУволен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.Период,
		|	Сотрудники.Состояние
		|ИЗ
		|	РегистрСведений.СостояниеСотрудников КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И Сотрудники.Состояние <> &СостояниеБолеет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеНачисленияСрезПоследних.ВидРасчета КАК ВидРасчета,
		|	ПлановыеНачисленияСрезПоследних.Размер КАК Размер,
		|	&НачалоМесяца КАК Период,
		|	ПлановыеНачисленияСрезПоследних.ВидРасчета.ТребуетСбораБазы КАК ТребуетСбораБазы,
		|	ПлановыеНачисленияСрезПоследних.Показатель
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления.СрезПоследних(&НачалоМесяца,) КАК ПлановыеНачисленияСрезПоследних
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Размер > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ФизическоеЛицо,
		|	ПлановыеНачисления.ВидРасчета,
		|	ПлановыеНачисления.Размер,
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.ВидРасчета.ТребуетСбораБазы,
		|	ПлановыеНачисления.Показатель
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеУдержанияСрезПоследних.ВидРасчета КАК ВидРасчета,
		|	ПлановыеУдержанияСрезПоследних.Размер КАК Размер,
		|	ПлановыеУдержанияСрезПоследних.Показатель КАК Показатель,
		|	&НачалоМесяца КАК Период
		|ПОМЕСТИТЬ ВТПлановыеУдержания
		|ИЗ
		|	РегистрСведений.ПлановыеУдержания.СрезПоследних(&НачалоМесяца,) КАК ПлановыеУдержанияСрезПоследних
		|ГДЕ
		|	ПлановыеУдержанияСрезПоследних.Размер > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.ВидРасчета,
		|	ПлановыеУдержания.Размер,
		|	ПлановыеУдержания.Показатель,
		|	ПлановыеУдержания.Период
		|ИЗ
		|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
		|ГДЕ
		|	ПлановыеУдержания.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПлановыеНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТСотрудники.Подразделение КАК Подразделение,
		|	ВТСотрудники.Должность КАК Должность,
		|	ВТПлановыеНачисления.ВидРасчета КАК ВидРасчета,
		|	ВТПлановыеНачисления.Размер КАК Размер,
		|	ВТПлановыеНачисления.Период КАК Период,
		|	ВТСотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	ВТСотрудники.Состояние КАК Состояние,
		|	ВТПлановыеНачисления.ТребуетСбораБазы КАК ТребуетСбораБазы,
		|	ВТПлановыеНачисления.Показатель
		|ИЗ
		|	ВТСотрудники КАК ВТСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ВТПлановыеНачисления
		|		ПО (ВТПлановыеНачисления.ФизическоеЛицо = ВТСотрудники.ФизическоеЛицо)
		|		И (ВТПлановыеНачисления.Период = ВТСотрудники.Период)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|ИТОГИ
		|ПО
		|	ФизическоеЛицо,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТСотрудники.Подразделение КАК Подразделение,
		|	ВТСотрудники.Должность КАК Должность,
		|	ВТПлановыеУдержания.ВидРасчета КАК ВидРасчета,
		|	ВТПлановыеУдержания.Размер КАК Размер,
		|	ВТПлановыеУдержания.Период КАК Период,
		|	ВТСотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	ВТСотрудники.Состояние КАК Состояние,
		|	ВТПлановыеУдержания.ВидРасчета.ТребуетСбораБазы КАК ТребуетСбораБазы,
		|	ВТПлановыеУдержания.Показатель КАК Показатель
		|ИЗ
		|	ВТСотрудники КАК ВТСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержания КАК ВТПлановыеУдержания
		|		ПО (ВТПлановыеУдержания.ФизическоеЛицо = ВТСотрудники.ФизическоеЛицо)
		|		И (ВТПлановыеУдержания.Период = ВТСотрудники.Период)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|ИТОГИ
		|ПО
		|	ФизическоеЛицо,
		|	ВидРасчета";
	
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоМесяца", ПериодРегистрации);
	Запрос.УстановитьПараметр("СостояниеУволен", Перечисления.СостоянияФизическогоЛица.Уволен);
	Запрос.УстановитьПараметр("СостояниеБолеет", Перечисления.СостоянияФизическогоЛица.Болеет);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов.Получить(3);
	
	ВыборкаФизическоеЛицо = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФизическоеЛицо.Следующий() Цикл
		
		ВыборкаВидРасчета = ВыборкаФизическоеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаВидРасчета.Следующий() Цикл
			
			ПериодДействияКонец = КонецМесяца(ПериодРегистрации);
			
			ВыборкаДетальныеЗаписи = ВыборкаВидРасчета.Выбрать();
	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				Если ВыборкаДетальныеЗаписи.Размер = 0 Тогда
					
					ПериодДействияКонец = КонецДня(ВыборкаДетальныеЗаписи.Период);
					Продолжить;
					
				КонецЕсли;
					
					НоваяСтрока = Начисления.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					
					НоваяСтрока.ПериодДействияКонец = ПериодДействияКонец;
					НоваяСтрока.ПериодДействияНачало = ВыборкаДетальныеЗаписи.Период;
					
					Если ВыборкаДетальныеЗаписи.ТребуетСбораБазы Тогда
					
						НоваяСтрока.БазовыйПериодКонец = ПериодДействияКонец;
						НоваяСтрока.БазовыйПериодНачало = ВыборкаДетальныеЗаписи.Период;
					
					КонецЕсли;
					
					ПериодДействияКонец = ВыборкаДетальныеЗаписи.Период - 1;
					
				КонецЦикла;
				
		КонецЦикла;
	КонецЦикла;
	

	//----------------------
	
	РезультатЗапроса = МассивРезультатов.Получить(4);
	
	ВыборкаФизическоеЛицо = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФизическоеЛицо.Следующий() Цикл
		
		ВыборкаВидРасчета = ВыборкаФизическоеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаВидРасчета.Следующий() Цикл
			
			ПериодДействияКонец = КонецМесяца(ПериодРегистрации);
			
			ВыборкаДетальныеЗаписи = ВыборкаВидРасчета.Выбрать();
	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				Если ВыборкаДетальныеЗаписи.Размер = 0 Тогда
					
					ПериодДействияКонец = КонецДня(ВыборкаДетальныеЗаписи.Период);
					Продолжить;
					
				КонецЕсли;
					
					НоваяСтрока = Удержания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					
					Если ВыборкаДетальныеЗаписи.ТребуетСбораБазы Тогда
					
						НоваяСтрока.БазовыйПериодКонец = ПериодДействияКонец;
						НоваяСтрока.БазовыйПериодНачало = ВыборкаДетальныеЗаписи.Период;
					
					КонецЕсли;
					
					ПериодДействияКонец = ВыборкаДетальныеЗаписи.Период - 1;
					
				КонецЦикла;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)

	ЗаполнитьНаборЗаписей_Начисления("Проведение");
	ЗаполнитьНаборЗаписей_Удержания("Проведение");
	
	ОбщийМодульРасчетРесурсов.ЗаполнитьНаборЗаписей_ВзаиморасчетыСРаботниками(Движения.ВзаиморасчетыСРаботниками);
	
КонецПроцедуры

#КонецОбласти

#Область РассчитатьРесурсыПоКоманде

Процедура РассчитатьРесурсы() Экспорт 

	НачатьТранзакцию();
	
	ЗаполнитьНаборЗаписей_Начисления("Расчет");
	ЗаполнитьНаборЗаписей_Удержания("Расчет");
	
	ОбщийМодульРасчетРесурсов.РассчитатьРесурсы_Начисления(Движения.Начисления);
	ОбщийМодульРасчетРесурсов.РассчитатьРесурсы_Удержания(Движения.Удержания);
	
	ПерезаполнитьТабличнуюЧасть_Начисления();
	ПерезаполнитьТабличнуюЧасть_Удержания();
	
	ОчиститьНаборыЗаписейПослеРасчета();
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ПерезаполнитьТабличнуюЧасть_Начисления() 
	
	Начисления.Очистить();
	
	Для каждого Движение Из Движения.Начисления Цикл
	
		НоваяСтрока = Начисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
	
	КонецЦикла;

КонецПроцедуры

Процедура ПерезаполнитьТабличнуюЧасть_Удержания() 
	
	Удержания.Очистить();
	
	Для каждого Движение Из Движения.Удержания Цикл
	
		НоваяСтрока = Удержания.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
	
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьНаборыЗаписейПослеРасчета()

	Движения.Начисления.Очистить();;
	Движения.Начисления.Записать();

	Движения.Удержания.Очистить();
	Движения.Удержания.Записать();

КонецПроцедуры

#КонецОбласти


Процедура ПереРассчитатьРесурсы() Экспорт 

	//Занятие 5
	
	Возврат;
	
	НачатьТранзакцию();
	
	Движения.Начисления.Прочитать();	
	Движения.Удержания.Прочитать();	

	ОбщийМодульРасчетРесурсов.ПереРассчитатьРесурсы_Начисления(Движения.Начисления);
	ОбщийМодульРасчетРесурсов.ПереРассчитатьРесурсы_Удержания(Движения.Удержания);
	
	ПерезаполнитьТабличнуюЧасть_Начисления();
	ПерезаполнитьТабличнуюЧасть_Удержания();
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры


#Область ЗаполнениеНаборовЗаписей

Процедура ЗаполнитьНаборЗаписей_Начисления(Режим)
	
	Перем Движение, ТекСтрокаНачисления;
	
	Для Каждого ТекСтрокаНачисления Из Начисления Цикл
		
		Движение = Движения.Начисления.Добавить();
		
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = ТекСтрокаНачисления.ВидРасчета;
		Движение.Показатель = ТекСтрокаНачисления.Показатель;
		Движение.Размер = ТекСтрокаНачисления.Размер;
		Движение.ГрафикРаботы = ТекСтрокаНачисления.ГрафикРаботы;
		
		Движение.ПериодДействияНачало = ТекСтрокаНачисления.ПериодДействияНачало;
		Движение.ПериодДействияКонец = ТекСтрокаНачисления.ПериодДействияКонец;
		
		Движение.ПериодРегистрации = ПериодРегистрации;
		
		Движение.БазовыйПериодНачало = ТекСтрокаНачисления.БазовыйПериодНачало;
		Движение.БазовыйПериодКонец = ТекСтрокаНачисления.БазовыйПериодКонец;
		
		Движение.ФизическоеЛицо = ТекСтрокаНачисления.ФизическоеЛицо;
		Движение.Подразделение = ТекСтрокаНачисления.Подразделение;
		Движение.Должность = ТекСтрокаНачисления.Должность;
		
		Если Режим = "Расчет" Тогда
			Движение.Результат = 0;
			Движение.ОтработаноДней = 0;
		ИначеЕсли Режим = "Проведение" Тогда
			Движение.Результат = ТекСтрокаНачисления.Результат;
			Движение.ОтработаноДней = ТекСтрокаНачисления.ОтработаноДней;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Начисления.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписей_Удержания(Режим)
	
	Перем Движение, ТекСтрокаУдержания;
	
	Для Каждого ТекСтрокаУдержания Из Удержания Цикл
		Движение = Движения.Удержания.Добавить();
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = ТекСтрокаУдержания.ВидРасчета;
		Движение.Показатель = ТекСтрокаУдержания.Показатель;
		Движение.Размер = ТекСтрокаУдержания.Размер;

		Движение.ПериодРегистрации = ПериодРегистрации;

		Движение.БазовыйПериодНачало = ТекСтрокаУдержания.БазовыйПериодНачало;
		Движение.БазовыйПериодКонец = ТекСтрокаУдержания.БазовыйПериодКонец;

		Движение.ФизическоеЛицо = ТекСтрокаУдержания.ФизическоеЛицо;
		Движение.Подразделение = ТекСтрокаУдержания.Подразделение;
		Движение.Должность = ТекСтрокаУдержания.Должность;
		
		Если Режим = "Расчет" Тогда
			Движение.Результат = 0;
		ИначеЕсли Режим = "Проведение" Тогда
			Движение.Результат = ТекСтрокаУдержания.Результат;
		КонецЕсли;
		
	КонецЦикла;

	Движения.Удержания.Записать();
	
	
КонецПроцедуры

#КонецОбласти 

#Область РасчетРесурсов

//Процедуры из этой области не используем
//Расчет перенесен в общий модуль!	

Процедура РассчитатьРесурсы_Начисления()

	НаборЗаписей = Движения.Начисления;
	
    //Получаем упорядоченные по категориям данные текущего набора записей, записанные в БД
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	Начисления.Активность КАК Активность,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Должность КАК Должность,
	|	Начисления.Результат КАК Результат,
	|	Начисления.ОтработаноДней КАК ОтработаноДней,
	|	Начисления.Размер КАК Размер,
	|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
	|	Начисления.Показатель
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДвижения.ВидРасчета
	|ПОМЕСТИТЬ ВТВидыРасчетаДокумента
	|ИЗ
	|	ВТДвижения КАК ВТДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВидыРасчетаДокумента.ВидРасчета,
	|	НачисленияВедущиеВидыРасчета.ВидРасчета КАК ВедущийВидРасчета
	|ПОМЕСТИТЬ ВТВедущиеВидыРасчета
	|ИЗ
	|	ВТВидыРасчетаДокумента КАК ВТВидыРасчетаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК НачисленияВедущиеВидыРасчета
	|		ПО ВТВидыРасчетаДокумента.ВидРасчета = НачисленияВедущиеВидыРасчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВедущиеВидыРасчета.ВидРасчета,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТВидыРасчетаДокумента.ВидРасчета) КАК Приоритет
	|ПОМЕСТИТЬ ВТПриоритетыВидовРасчета
	|ИЗ
	|	ВТВедущиеВидыРасчета КАК ВТВедущиеВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыРасчетаДокумента КАК ВТВидыРасчетаДокумента
	|		ПО ВТВедущиеВидыРасчета.ВедущийВидРасчета = ВТВидыРасчетаДокумента.ВидРасчета
	|СГРУППИРОВАТЬ ПО
	|	ВТВедущиеВидыРасчета.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвижения.НомерСтроки КАК НомерСтроки,
	|	ВТДвижения.ВидРасчета КАК ВидРасчета,
	|	ВТДвижения.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТДвижения.Регистратор КАК Регистратор,
	|	ВТДвижения.ПериодДействия КАК ПериодДействия,
	|	ВТДвижения.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ВТДвижения.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ВТДвижения.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВТДвижения.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ВТДвижения.Активность КАК Активность,
	|	ВТДвижения.Сторно КАК Сторно,
	|	ВТДвижения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТДвижения.Подразделение КАК Подразделение,
	|	ВТДвижения.Должность КАК Должность,
	|	ВТДвижения.Результат КАК Результат,
	|	ВТДвижения.ОтработаноДней КАК ОтработаноДней,
	|	ВТДвижения.Размер КАК Размер,
	|	ВТДвижения.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТПриоритетыВидовРасчета.Приоритет КАК Приоритет,
	|	ВТДвижения.Показатель
	|ПОМЕСТИТЬ ВТДвиженияСПриоритетом
	|ИЗ
	|	ВТДвижения КАК ВТДвижения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыВидовРасчета КАК ВТПриоритетыВидовРасчета
	|		ПО ВТДвижения.ВидРасчета = ВТПриоритетыВидовРасчета.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвиженияСПриоритетом.НомерСтроки КАК НомерСтроки,
	|	ВТДвиженияСПриоритетом.Приоритет КАК Приоритет,
	|	ВТДвиженияСПриоритетом.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВТДвиженияСПриоритетом.ВидРасчета.Формула КАК Формула,
	|	ВТДвиженияСПриоритетом.Показатель,
	|	ВТДвиженияСПриоритетом.Показатель.Идентификатор КАК Идентификатор,
	|	ВТДвиженияСПриоритетом.Размер,
	|	ВТДвиженияСПриоритетом.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени
	|ИЗ
	|	ВТДвиженияСПриоритетом КАК ВТДвиженияСПриоритетом
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	НомерСтроки
	|ИТОГИ
	|ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВидыРасчетаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВедущиеВидыРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПриоритетыВидовРасчета";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПриоритет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Внешний цикл по категориям
	Пока ВыборкаПриоритет.Следующий() Цикл

		//Запрос для получения базы и данных графика для записей с текущей категорией 
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Менеджер;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТДвиженияСПриоритетом.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТЗаписиДляРасчета
		|ИЗ
		|	ВТДвиженияСПриоритетом КАК ВТДвиженияСПриоритетом
		|ГДЕ
		|	ВТДвиженияСПриоритетом.Приоритет = &Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеДниФактическийПериодДействия, 0) КАК ЗначениеДниФактическийПериодДействия,
		|	ЕСТЬNULL(НачисленияДанныеГрафика.ЗначениеДниПериодДействия, 0) КАК ЗначениеДниПериодДействия
		|ПОМЕСТИТЬ ВТДанныеГрафика
		|ИЗ
		|	РегистрРасчета.Начисления.ДанныеГрафика(Регистратор = &Регистратор
		|	И ВидРасчета.ТребуетДанныеГрафика = ИСТИНА
		|	И НомерСтроки В
		|		(ВЫБРАТЬ
		|			ВТЗаписиДляРасчета.НомерСтроки
		|		ИЗ
		|			ВТЗаписиДляРасчета КАК ВТЗаписиДляРасчета)) КАК НачисленияДанныеГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияБазаНачисления.НомерСтроки КАК НомерСтроки,
		|	НачисленияБазаНачисления.РезультатБаза КАК РезультатБаза,
		|	НачисленияБазаНачисления.ОтработаноДнейБаза КАК ОтработаноДнейБаза
		|ПОМЕСТИТЬ ВТБазаВНачислениях
		|ИЗ
		|	РегистрРасчета.Начисления.БазаНачисления(&Измерения_Начисления, &Измерения_Начисления,,
		|		Регистратор = &Регистратор
		|	И ВидРасчета.ТребуетСбораБазы = ИСТИНА
		|	И НомерСтроки В
		|		(ВЫБРАТЬ
		|			ВТЗаписиДляРасчета.НомерСтроки
		|		ИЗ
		|			ВТЗаписиДляРасчета КАК ВТЗаписиДляРасчета)) КАК НачисленияБазаНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗаписиДляРасчета.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВТДанныеГрафика.ЗначениеДниФактическийПериодДействия, 0) КАК ЗначениеДниФактическийПериодДействия,
		|	ЕСТЬNULL(ВТДанныеГрафика.ЗначениеДниПериодДействия, 0) КАК ЗначениеДниПериодДействия,
		|	ЕСТЬNULL(ВТБазаВОсновныхНачислениях.РезультатБаза, 0) КАК РезультатБаза,
		|	ЕСТЬNULL(ВТБазаВОсновныхНачислениях.ОтработаноДнейБаза, 0) КАК ОтработаноДнейБаза
		|ИЗ
		|	ВТЗаписиДляРасчета КАК ВТЗаписиДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафика КАК ВТДанныеГрафика
		|		ПО (ВТДанныеГрафика.НомерСтроки = ВТЗаписиДляРасчета.НомерСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаВНачислениях КАК ВТБазаВОсновныхНачислениях
		|		ПО ВТЗаписиДляРасчета.НомерСтроки = ВТБазаВОсновныхНачислениях.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗаписиДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДанныеГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазаВНачислениях";
		
		
		Измерения_Начисления = Новый Массив;
		Измерения_Начисления.Добавить("ФизическоеЛицо");
		Измерения_Начисления.Добавить("Подразделение");
		Измерения_Начисления.Добавить("Должность");
		
		Запрос.УстановитьПараметр("Приоритет", ВыборкаПриоритет.Приоритет);
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		Запрос.УстановитьПараметр("Измерения_Начисления", Измерения_Начисления);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//Выборка с данными для записей текущей категории
		Выборка_ДанныеГрафика_База = РезультатЗапроса.Выбрать();
		
		
		//Вложенный цикл по записям текущей категории
		ВыборкаДетальныеЗаписи = ВыборкаПриоритет.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Запись = НаборЗаписей.Получить(ВыборкаДетальныеЗаписи.НомерСтроки - 1);
			
			Выборка_ДанныеГрафика_База.НайтиСледующий(ВыборкаДетальныеЗаписи.НомерСтроки,"НомерСтроки");
			
			РасчетРесурсов(ВыборкаДетальныеЗаписи,Выборка_ДанныеГрафика_База, Запись);
			
			
			//Проверка - надо ли записать отработанные дни
			Если ВыборкаДетальныеЗаписи.ЗачетОтработанногоВремени Тогда
				
				Запись.ОтработаноДней = Выборка_ДанныеГрафика_База.ЗначениеДниФактическийПериодДействия;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(,Истина);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РассчитатьРесурсы_Удержания() 
	
	
	
	НаборЗаписей = Движения.Удержания;

    //Получаем упорядоченные по категориям данные текущего набора записей, записанные в БД
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.НомерСтроки КАК НомерСтроки,
	|	Удержания.ВидРасчета КАК ВидРасчета,
	|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
	|	Удержания.Регистратор КАК Регистратор,
	|	Удержания.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	Удержания.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	Удержания.Активность КАК Активность,
	|	Удержания.Сторно КАК Сторно,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Подразделение КАК Подразделение,
	|	Удержания.Должность КАК Должность,
	|	Удержания.Результат КАК Результат,
	|	Удержания.Размер КАК Размер,
	|	Удержания.Показатель
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДвижения.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТВидыРасчетаДокумента
	|ИЗ
	|	ВТДвижения КАК ВТДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВидыРасчетаДокумента.ВидРасчета КАК ВидРасчета,
	|	УдержанияВедущиеВидыРасчета.ВидРасчета КАК ВедущийВидРасчета
	|ПОМЕСТИТЬ ВТВедущиеВидыРасчета
	|ИЗ
	|	ВТВидыРасчетаДокумента КАК ВТВидыРасчетаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.ВедущиеВидыРасчета КАК УдержанияВедущиеВидыРасчета
	|		ПО ВТВидыРасчетаДокумента.ВидРасчета = УдержанияВедущиеВидыРасчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВедущиеВидыРасчета.ВидРасчета КАК ВидРасчета,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТВидыРасчетаДокумента.ВидРасчета) КАК Приоритет
	|ПОМЕСТИТЬ ВТПриоритетыВидовРасчета
	|ИЗ
	|	ВТВедущиеВидыРасчета КАК ВТВедущиеВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыРасчетаДокумента КАК ВТВидыРасчетаДокумента
	|		ПО ВТВедущиеВидыРасчета.ВедущийВидРасчета = ВТВидыРасчетаДокумента.ВидРасчета
	|СГРУППИРОВАТЬ ПО
	|	ВТВедущиеВидыРасчета.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвижения.НомерСтроки КАК НомерСтроки,
	|	ВТДвижения.ВидРасчета КАК ВидРасчета,
	|	ВТДвижения.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТДвижения.Регистратор КАК Регистратор,
	|	ВТДвижения.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВТДвижения.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ВТДвижения.Активность КАК Активность,
	|	ВТДвижения.Сторно КАК Сторно,
	|	ВТДвижения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТДвижения.Подразделение КАК Подразделение,
	|	ВТДвижения.Должность КАК Должность,
	|	ВТДвижения.Результат КАК Результат,
	|	ВТДвижения.Размер КАК Размер,
	|	ВТПриоритетыВидовРасчета.Приоритет КАК Приоритет,
	|	ВТДвижения.Показатель
	|ПОМЕСТИТЬ ВТДвиженияСПриоритетом
	|ИЗ
	|	ВТДвижения КАК ВТДвижения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыВидовРасчета КАК ВТПриоритетыВидовРасчета
	|		ПО ВТДвижения.ВидРасчета = ВТПриоритетыВидовРасчета.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвиженияСПриоритетом.НомерСтроки КАК НомерСтроки,
	|	ВТДвиженияСПриоритетом.ВидРасчета КАК ВидРасчета,
	|	ВТДвиженияСПриоритетом.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВТДвиженияСПриоритетом.Показатель,
	|	ВТДвиженияСПриоритетом.ВидРасчета.Формула КАК Формула,
	|	ВТДвиженияСПриоритетом.Показатель.Идентификатор КАК Идентификатор,
	|	ВТДвиженияСПриоритетом.Размер,
	|	ВТДвиженияСПриоритетом.Приоритет КАК Приоритет
	|ИЗ
	|	ВТДвиженияСПриоритетом КАК ВТДвиженияСПриоритетом
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	НомерСтроки
	|ИТОГИ
	|ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВидыРасчетаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВедущиеВидыРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПриоритетыВидовРасчета";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПриоритет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Внешний цикл по категориям
	Пока ВыборкаПриоритет.Следующий() Цикл
		
		//Запрос для получения базы и данных графика для записей с текущей категорией 
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Менеджер;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТДвиженияСПриоритетом.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТЗаписиДляРасчета
		|ИЗ
		|	ВТДвиженияСПриоритетом КАК ВТДвиженияСПриоритетом
		|ГДЕ
		|	ВТДвиженияСПриоритетом.Приоритет = &Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдержанияБазаНачисления.НомерСтроки КАК НомерСтроки,
		|	УдержанияБазаНачисления.РезультатБаза КАК РезультатБаза,
		|	УдержанияБазаНачисления.ОтработаноДнейБаза КАК ОтработаноДнейБаза
		|ПОМЕСТИТЬ ВТБазаВНачислениях
		|ИЗ
		|	РегистрРасчета.Удержания.БазаНачисления(&ИменаИзмерений, &ИменаИзмерений,, Регистратор = &Регистратор
		|	И ВидРасчета.ТребуетСбораБазы = ИСТИНА
		|	И НомерСтроки В
		|		(ВЫБРАТЬ
		|			ВТЗаписиДляРасчета.НомерСтроки
		|		ИЗ
		|			ВТЗаписиДляРасчета КАК ВТЗаписиДляРасчета)) КАК УдержанияБазаНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗаписиДляРасчета.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВТБазаВОсновныхНачислениях.РезультатБаза, 0) КАК РезультатБаза,
		|	ЕСТЬNULL(ВТБазаВОсновныхНачислениях.ОтработаноДнейБаза, 0) КАК ОтработаноДнейБаза,
		|	0 КАК ЗначениеДниПериодДействия,
		|	0 КАК ЗначениеДниФактическийПериодДействия
		|ИЗ
		|	ВТЗаписиДляРасчета КАК ВТЗаписиДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаВНачислениях КАК ВТБазаВОсновныхНачислениях
		|		ПО ВТЗаписиДляРасчета.НомерСтроки = ВТБазаВОсновныхНачислениях.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазаВНачислениях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗаписиДляРасчета";
	
		
		ИменаИзмерений = Новый Массив;
		ИменаИзмерений.Добавить("ФизическоеЛицо");
		ИменаИзмерений.Добавить("Подразделение");
		ИменаИзмерений.Добавить("Должность");
		
		Запрос.УстановитьПараметр("ИменаИзмерений", ИменаИзмерений);
		Запрос.УстановитьПараметр("Приоритет", ВыборкаПриоритет.Приоритет);
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//Выборка с данными для записей текущей категории
		Выборка_ДанныеГрафика_База = РезультатЗапроса.Выбрать();
		
		
		//Вложенный цикл по записям текущей категории
		ВыборкаДетальныеЗаписи = ВыборкаПриоритет.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			Запись = НаборЗаписей.Получить(ВыборкаДетальныеЗаписи.НомерСтроки - 1);
			
			Выборка_ДанныеГрафика_База.НайтиСледующий(ВыборкаДетальныеЗаписи.НомерСтроки,"НомерСтроки");

//			Если ВыборкаДетальныеЗаписи.СпособРасчета = Перечисления.СпособыРасчета.ПоФормуле Тогда
//				
//				НормаДней = Выборка_ДанныеГрафика_База.ЗначениеДниПериодДействия;
//				
//				ФактДней = Выборка_ДанныеГрафика_База.ЗначениеДниФактическийПериодДействия;
//				
//				ОтработаноДнейБаза = Выборка_ДанныеГрафика_База.ДнейБаза;
//				
//				РезультатБаза = Выборка_ДанныеГрафика_База.РезультатБаза;
//				
//				Если ВыборкаДетальныеЗаписи.Идентификатор = "Процент" Тогда 
//					
//					Процент = ВыборкаДетальныеЗаписи.Размер;
//
//				ИначеЕсли ВыборкаДетальныеЗаписи.Идентификатор = "ФиксированнаяСумма" Тогда 
//					
//					ФиксированнаяСумма = ВыборкаДетальныеЗаписи.Размер;
//				
//				КонецЕсли;
//				
//				Выполнить("Запись.Результат = " + ВыборкаДетальныеЗаписи.Формула);
//	
//				
//			КонецЕсли;			
			РасчетРесурсов(ВыборкаДетальныеЗаписи, Выборка_ДанныеГрафика_База, Запись);

		КонецЦикла;
		
		НаборЗаписей.Записать(,Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРесурсов(ВыборкаДетальныеЗаписи, Выборка_ДанныеГрафика_База, Запись)
	
	//1 
	Если ВыборкаДетальныеЗаписи.СпособРасчета = Перечисления.СпособыРасчета.ПроизвольнаяФормула Тогда

		НормаДней = Выборка_ДанныеГрафика_База.ЗначениеДниПериодДействия;

		ФактДней = Выборка_ДанныеГрафика_База.ЗначениеДниФактическийПериодДействия;

		Если ФактДней > 0 Тогда

			Если НормаДней = 0 Тогда

				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнен график!";
				Сообщение.Сообщить();

				Возврат;

			КонецЕсли;
		КонецЕсли;

		РезультатБаза = Выборка_ДанныеГрафика_База.РезультатБаза;

		ОтработаноДнейБаза = Выборка_ДанныеГрафика_База.ОтработаноДнейБаза;

		Показатель = ВыборкаДетальныеЗаписи.Размер;

		Если СтрНайти(ВыборкаДетальныеЗаписи.Формула, ВыборкаДетальныеЗаписи.Идентификатор) > 0 Тогда

			Формула = СтрЗаменить(ВыборкаДетальныеЗаписи.Формула, ВыборкаДетальныеЗаписи.Идентификатор, "Показатель");

		Иначе
			Возврат;
		КонецЕсли;

		Выполнить ("Запись.Результат = " + Формула);
		
		//2
		ИначеЕсли ВыборкаДетальныеЗаписи.СпособРасчета = Перечисления.СпособыРасчета.ОплатаБольничного Тогда

		НормаДней = Выборка_ДанныеГрафика_База.ЗначениеДниПериодДействия;

		ФактДней = Выборка_ДанныеГрафика_База.ЗначениеДниФактическийПериодДействия;

		Если ФактДней > 0 Тогда

			Если НормаДней = 0 Тогда

				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнен график!";
				Сообщение.Сообщить();

				Возврат;

			КонецЕсли;
		КонецЕсли;

		РезультатБаза = Выборка_ДанныеГрафика_База.РезультатБаза;

		ОтработаноДнейБаза = Выборка_ДанныеГрафика_База.ОтработаноДнейБаза;

		Показатель = ВыборкаДетальныеЗаписи.Размер;

		Если СтрНайти(ВыборкаДетальныеЗаписи.Формула, ВыборкаДетальныеЗаписи.Идентификатор) > 0 Тогда

			Формула = СтрЗаменить(ВыборкаДетальныеЗаписи.Формула, ВыборкаДетальныеЗаписи.Идентификатор, "Показатель");

		Иначе
			Возврат;
		КонецЕсли;

		Выполнить ("Запись.Результат = " + Формула);
	
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 


